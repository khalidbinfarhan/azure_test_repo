{
	"name": "TotalEmployeebyDeptDatatable",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employeedataset",
						"type": "DatasetReference"
					},
					"name": "employee"
				},
				{
					"dataset": {
						"referenceName": "departmentdataset",
						"type": "DatasetReference"
					},
					"name": "DepartmentData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "destinationDataSet",
						"type": "DatasetReference"
					},
					"name": "Destination"
				}
			],
			"transformations": [
				{
					"name": "AggregateOnDep"
				},
				{
					"name": "JoinDepartment"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          Name as string,",
				"          salary as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employee",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DepartmentData",
				"employee aggregate(groupBy(department),",
				"     TotalEmployees = count(empid)) ~> AggregateOnDep",
				"AggregateOnDep, DepartmentData join(department == depid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinDepartment",
				"JoinDepartment sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string",
				"     ),",
				"     partitionFileNames:['new_mapped_file.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          depname,",
				"          TotalEmployees",
				"     ),",
				"     partitionBy('hash', 1)) ~> Destination"
			]
		}
	}
}